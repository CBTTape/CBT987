WAITT    TITLE 'TSO COMMAND TO ALLOW RESET OF WAIT TIME CANCEL VALUE'
WAITT    CSECT ,
WAITT    RMODE 24
WAITT    AMODE 31
*
         PRINT GEN
*
* FUNCTION: ALLOWS A TSO USER TO MODIFY THE TIME VALUE THAT IS USED TO
*           DETERMINE HOW LONG THE SESSION MAY REMAIN IN A WAIT STATE
*           BEFORE IT IS CANCELLED (S522 ABEND).  USER MUST HAVE TSO
*           OPER AUTHORITY, AND THIS COMMAND MUST BE AUTHORIZED IN THE
*           IKJEFTE2 TABLE (AUTHCMD NAMES ENTRY IN PARMLIB MEMBER
*           IKJTSOxx).
*
* ASSEMBLY MACLIBS:     SYS1.MACLIB
*
* LINK EDIT ATTRIBUTES: REUS, AC(1)
*
* REQUIREMENTS:   NEED PSCB OPER AUTHORITY TO CHANGE ANYTHING.
*
*                 COMMAND MUST BE RUN APF-AUTHORIZED, AND MUST
*                  BE ENTERED IN THE IKJEFTE2 TABLE.
*
* WRITTEN:   AROUND 1989.
*
* MODIFIED:  SAM GOLOB  -  MARCH 2019
*
* INVOKING: WAITT #####X    (SEE ADDED POWER, BELOW)
*
*    WHERE: ##### IS 1 TO 5 DIGIT VALUE
*
*               X IS H, M OR S TO SIGNIFY THAT THE VALUE IS HOURS,
*                 MINUTES OR SECONDS.
*
*     NOTE: THE NUMBER OF SECONDS IS CONVERTED INTO WAIT TIME UNITS,
*           EACH OF WHICH REPRESENTS 1.048576 SECONDS.  SOME VALUES
*           CAN NOT BE REPRESENTED EXACTLY.  IE: 30 MINUTES IS 1800
*           SECONDS OR 1716 WAIT UNITS.  WHEN 1716 WAIT UNITS ARE
*           CONVERTED BACK TO SECONDS, THEY BECOME 1799 SECONDS.
*           THIS IS NOT A PHENOMENON OF THE COMMAND, BUT OF MVS.
*
*    ADDED POWER:   WAITT T  -  EXEMPTS JOB FROM STEP TIMING
*                   WAITT Z  -  TURNS OF EXEMPTION SWITCH
*
*          ASCBRCTF IS X'66' INTO THE ASCB.  X'01' ON, EXEMPTS
*                                            FROM STEP TIMING.
*
FPR0     EQU   0                   FLOATING-POINT  REGISTER 0
*
R0       EQU   0                   GENERAL PURPOSE REGISTER 0
R1       EQU   1                      "       "        "    1
R2       EQU   2                      "       "        "    2
R3       EQU   3                      "       "        "    3
R4       EQU   4                      "       "        "    4
R5       EQU   5                      "       "        "    5
R6       EQU   6                      "       "        "    6
R7       EQU   7                      "       "        "    7
R8       EQU   8                      "       "        "    8
R9       EQU   9                      "       "        "    9
R10      EQU   10                     "       "        "    10
R11      EQU   11                     "       "        "    11
R12      EQU   12                     "       "        "    12
R13      EQU   13                     "       "        "    13
R14      EQU   14                     "       "        "    14
R15      EQU   15                     "       "        "    15
*
         EJECT ,
*
         USING WAITT,R15           TEMPORARY ADDRESSABILITY
*
BEGIN    SAVE  (14,12),T,'WAITT      &SYSDATE  &SYSTIME '
         LA    R12,SAVEAREA        GET ADDRESS OF OUR REG SAVE AREA
         ST    R13,4(,R12)         PROVIDE BACKWARD
         ST    R12,8(,R13)          AND FORWARD CHAINING
         LR    R13,R12             COPY NEW SAVE AREA ADDRESS
         LR    R12,R15             COPY PROGRAM  BASE ADDRESS
         DROP  R15                 DROP TEMPORARY ADDRESSABILITY
         USING WAITT,R12           AND PROVIDE PERMANENT ADDRESSABILITY
*
*       APF-AUTHORIZATION CHECK TO BE RUN FIRST..........
*
* -- >  Test if this command is being run APF Authorized - below
         STM   R15,R1,SAVE14T1     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.
* -- >  Test if this command is being run APF Authorized - above
*
         L     R3,16               GET ADDRESS OF CVT
         L     R3,0(,R3)            GET ADDRESS OF TCB/ASCB WORDS
         L     R3,12(,R3)            GET ADDRESS OF OUR ASCB..........
*
         LR    R4,R1               COPY PARM/CPPL ADDRESS
         TM    0(R4),X'80'         IS IT A PARM OR A CPPL ADDRESS
         BO    SHOWTIME            IF "CALL"ED, JUST SHOW THE TIME
*
* CHEAP SECURITY CHECK TO TRY TO KEEP UNAUTHORIZED USERS FROM BEING
* ABLE TO CHANGE THEIR WAIT TIME.  THIS WILL DO THE TRICK IF YOU RUN
* THE COMMAND FROM A PROTECTED AUTHORIZED LIBRARY, ELSE YOU MAY WANT
* TO GET A LITTLE MORE EXOTIC.  (I'VE TURNED IT OFF.  YOU ARE WELCOME
* TO TURN IT BACK ON--THE CODE HAS BEEN LEFT INTACT.)
*
         L     R5,8(,R4)           GET POINTER TO PSCB
         TM    16(R5),X'80'        DO WE HAVE OPER AUTHORITY
         BO    YESOPER             YES. GO DO OUR THING.
         BAL   R8,NOOPER           NO. SEND MESSAGE YOU DON'T HAVE IT
         B     SHOWTEND            AND EXIT.
YESOPER  DS    0H                  USER HAS PSCB OPER AUTHORITY.
         B     CHKCOMD             USER CHECK CURRENTLY DISABLED,
*                                  BUT LEFT IN, IF SOMEBODY WANTS
*                                  TO USE THE CODE AS A MODEL.
* ----->    Check user by Userid, code - below
         LA    R6,VALUSRS          POINT TO START OF VALIDATION TABLE
*
CHKUSER  DS    0H
         CLC   0(7,R5),0(R6)       IS CALLER ALLOWED TO RESET TIME
         BE    CHKCOMD             YES, CONTINUE
         LA    R6,20(,R6)          ELSE POINT TO NEXT TABLE ENTRY
         CLI   0(R6),255           IS IT END OF TABLE
         BNE   CHKUSER             NO, CONTINUE
         B     SHOWTIME            ELSE JUST SHOW THE TIME
* ----->    Check user by Userid, code - above
*
* GET INVOKER'S PARM, MAKE SURE IT'S VALID.........................
*
CHKCOMD  DS    0H
         MVC   MNMXVALS,=A(0900,65535,7200)  MIN MAX FOR EVERYBODY
*        MVC   MNMXVALS,8(R6)      MIN MAX BY USERID TABLE...
         L     R5,0(,R4)           GET POINTER TO COMMAND BUFFER
         LH    R6,2(,R5)           GET OFFSET TO COMMAND VARIABLE(S)
         LTR   R6,R6               ARE THERE ANY VARIABLES
         BZ    SHOWTIME            NO, SHOW THE CURRENT WAIT VALUE
         LH    R7,0(,R5)           GET LENGTH OF COMMAND BUFFER
         SR    R7,R6               SUBTRACT VARIABLE OFFSET FROM LGH.
         SH    R7,=H'5'            SUBTRACT CONSTANT  FROM LENGTH
         BM    SHOWTIME             SHOW THE CURRENT WAIT VALUE
*                                    IF NO VARIABLES ON THE COMMAND
         LA    R5,4(R5,R6)         POINT TO START OF VARIABLES
*
         CH    R7,=AL2(6)          DOES INPUT EXCEED MAXIMUM
         BNH   *+8                 NO, CONTINUE
         LA    R7,5                ELSE SET LENGTH TO MAX
         LA    R1,0(R5,R7)         POINT TO LAST CHARACTER IN VARIABLE
         OI    0(R1),X'40'         SET LAST CHARACTER TO UPPER-CASE
         BCTR  R7,R0               DECREMENT LENGTH BY 1
* ---  Test the parms here  ---  below
*                                  TEST PARMS HERE
         CLI   0(R1),C'T'          DO WE WANT TO EXEMPT FROM TIMING?
         BNE   PASST               NO. BYPASS THAT CODE.
         BAL   R8,EXEMPTIT         GO EXEMPT JOB.
         B     SHOWTIME            REPORT RESULTS AND EXIT.
PASST    DS    0H
         CLI   0(R1),C'Z'          DO WE WANT TO KILL EXEMPTION?
         BNE   OTHPARMS            NO. TEST FOR OTHER PARMS.
         BAL   R8,NOEXEMPT         GO KILL EXEMPTION BIT.
         B     SHOWTIME            REPORT RESULTS AND EXIT.
OTHPARMS DS    0H
         LA    R0,3600             SET MULTIPLIER VALUE FOR HOURS
         CLI   0(R1),C'H'           IS PARM SPECIFIED AS HOURS
         BE    VALIDATE              YES, CONTINUE
         LA    R0,60               SET MULTIPLIER VALUE FOR MINUTES
         CLI   0(R1),C'M'           IS PARM SPECIFIED AS MINUTES
         BE    VALIDATE              YES, CONTINUE
         LA    R0,1                SET MULTIPLIER VALUE FOR SECONDS
         CLI   0(R1),C'S'           IS PARM SPECIFIED AS SECONDS
         BNE   SHOWTIME              NO, DON'T ATTEMPT UPDATE
* ---  Test the parms here  ---  above
*
* CONVERT THE HOURS, MINUTES OR SECONDS TO SECONDS & MAKE SURE THAT
* IT'S WITHIN RANGE;  IF NOT DEFAULT TIME VALUE WILL BE SET........
*
VALIDATE STH   R0,DELTAVAL         STORE THE VARIABLE EXTENSION AMOUNT
         EX    R7,TRANVALS          ENSURE VARIABLE IS ALL NUMERIC
         BNZ   SHOWTIME              BYPASS UPDATE IF ANY NON-NUMERIC
         EX    R7,PACKVALS            ELSE PACK THE VARIABLE
         CVB   R0,DUBLWORD         CONVERT VALUE TO BINARY
         MH    R0,DELTAVAL         CONVERT VALUE TO SECONDS
         C     R0,MINTIME          IS REQUESTED VALUE < MINIMUM
         BNL   *+8                  NO, CONTINUE
         L     R0,DEFTIME            ELSE RESET TO DEFAULT VALUE
         C     R0,MAXTIME          IS REQUESTED VALUE > MAXIMUM
         BNH   *+8                  NO, CONTINUE
         L     R0,DEFTIME            ELSE RESET TO DEFAULT VALUE
         O     R0,SHORTZER         MAKE BINARY VALUE UNNORM F/P VALUE
         ST    R0,DUBLWORD         STORE THE F/P VALUE
         LE    FPR0,DUBLWORD       LOAD VALUE INTO F/P REGISTER
         DE    FPR0,=E'1.048576'   CONVERT FROM SECONDS TO WAIT UNITS
         AU    FPR0,SHORTZER       MAKE IT UN-NORMALIZED F/P VALUE
         STE   FPR0,DUBLWORD       STORE THE VALUE
         MVI   DUBLWORD,0          STRIP THE SIGN & EXPONENT
         BAL   R8,WAITRSET         RESET THE WAIT TIME IN ASCB
*
SHOWTIME L     R0,X'C4'(,R3)       PICK UP ASCB WAIT TIME VALUE
         O     R0,SHORTZER         MAKE BINARY VALUE UNNORM F/P VALUE
         ST    R0,DUBLWORD         STORE THE F/P VALUE
         LE    FPR0,DUBLWORD       LOAD VALUE INTO F/P REGISTER
         ME    FPR0,=E'1.048576'   CONVERT FROM WAIT UNITS TO SECONDS
         AE    FPR0,=E'0.5'        ROUND SECONDS
         AU    FPR0,SHORTZER       MAKE IT UN-NORMALIZED F/P VALUE
         STE   FPR0,DUBLWORD       STORE THE VALUE
         MVI   DUBLWORD,0          STRIP THE SIGN & EXPONENT
         L     R0,DUBLWORD         PICK UP THE BINARY VALUE
         CVD   R0,DUBLWORD         CONVERT IT TO DECIMAL
         ED    CURSECS,DUBLWORD+5  EDIT IT INTO THE MESSAGE
         TPUT  CURMSG,L'CURMSG     OUTPUT THE MESSAGE TO TERMINAL
*
         TM    X'66'(R3),X'01'     CHECK IF EXEMPTION IS ON
         BO    PRTYEXMT            YES. TELL US SO.
         TPUT  NTEXMPT,L'NTEXMPT   NO. TELL US THAT AS WELL.
         B     SHOWTEND
PRTYEXMT DS    0H
         TPUT  ISEXMPT,L'ISEXMPT   MESSAGE THAT WE'RE EXEMPT.
*
SHOWTEND DS    0H
         L     R13,4(,R13)         GET ADDRESS OF PREVIOUS SAVE AREA
         RETURN (14,12),T,RC=0      AND TERMINATE TASK WITH R/C = ZERO
*
NOTAUTH  TPUT  NAUTHMS,L'NAUTHMS
         B     SHOWTEND
*
TRANVALS TRT   0(0,R5),TRTABLE     *** EXECUTED INSTRUCTION ***
PACKVALS PACK  DUBLWORD,0(0,R5)    *** EXECUTED INSTRUCTION ***
*
* IN CASE YOU WANT TO CHECK THIS CODE OUT BEFORE INSTALLING, SET THE
* FOLLOWING NOP TO A BRANCH AND RUN IT;   IT'LL DO EVERYTHING EXCEPT
* ACTUALLY GETTING INTO AUTHORIZED STATE AND MODIFYING THE ASCB.....
*
WAITRSET L     R0,DUBLWORD         *** FOR TESTING,
         NOP   4(,R8)                  SET NOP TO BRANCH ***
*
* IF YOU USE A "SECRET" SVC TO GET INTO AUTHORIZED STATE (INSTEAD OF
* RUNNING FROM AUTHORIZED LIBRARY), HERE'S WHERE TO CODE IT.........
*
         MODESET KEY=ZERO,MODE=SUP
         MVC   X'C4'(4,R3),DUBLWORD MOVE NEW VALUE INTO ASCB
         MODESET KEY=NZERO,MODE=PROB
*
* IF YOU USE A "SECRET" SVC TO GET INTO AUTHORIZED STATE, HERE'S WHERE
* YOU WANT TO  GET BACK OUT INTO UNAUTHORIZED STATE.................
*
         BR    R8
*
* ------ >  Code to turn on exemption bit in the ASCBRCTF field
EXEMPTIT DS    0H                     Need APF-Authorization here
         MODESET KEY=ZERO,MODE=SUP
         OI    X'66'(R3),X'01'
         MODESET KEY=NZERO,MODE=PROB
*                                     Don't need authorization here
         TPUT  Q522MSG,L'Q522MSG      Say we are exempt from timing
         BR    R8
*
* ------ >  Code to turn off exemption bit in the ASCBRCTF field
NOEXEMPT DS    0H                     Need APF-Authorization here
         MODESET KEY=ZERO,MODE=SUP
         NI    X'66'(R3),X'FF'-X'01'
         MODESET KEY=NZERO,MODE=PROB
*                                     Don't need authorization here
         TPUT  NONEXMT,L'NONEXMT      Say we're not exempt from timing
         BR    R8
*
NOOPER   DS    0H
         TPUT  OPERMSG,L'OPERMSG      Say we need OPER authority
         BR    R8
*
         LTORG ,
SAVEAREA DC    8D'0'               REGISTER SAVE AREA
SAVE14T1 DC    2D'0'
*
DUBLWORD DC    D'0'                DOUBLE-WORD WORK AREA
SHORTZER DC    X'46000000'         SHORT UNNORMALIZED F/P ZERO
DELTAVAL DC    H'0'
*
         DC    0D'0'
TRTABLE  DC    256X'04'
         ORG   TRTABLE+C'0'
         DC    10X'00'
         ORG   ,
*
MNMXVALS DC    0XL12'0'
MINTIME  DC    A(0900)
MAXTIME  DC    A(65535)
DEFTIME  DC    A(7200)
*
* CHEAP SECURITY VERIFICATION TABLE FOLLOWS:
*
*    (1) REPLACE 'TSO_UID' WITH THE TSO USER I.D. THAT SHOULD BE
*        ALLOWED TO ISSUE THIS COMMAND.
*
*    (2) SET THE MINIMUM, MAXIMUM AND DEFAULT VALUES TO REFLECT
*        THE MINIMUM & MAXIMUM NUMBER OF SECONDS THE USER  WILL
*        BE ALLOWED TO SET AND THE DEFAULT VALUE THAT WILL BE
*        USED IF HE/SHE ATTEMPTS TO SET A VALUE THAT IS OUTSIDE
*        THE MIN/MAX RANGE.
*
VALUSRS  DC    CL8'TSO_UID1',A(0900,7200,3600) MIN,MAX,DEFAULT SECONDS
         DC    CL8'TSO_UID2',A(0900,7200,3600)
*
         DC    X'FF'               END-OF-TABLE STOPPER...............
*
*
CURMSG   DC    C'CURRENT WAIT TIME VALUE IS: NN,NNN SECONDS'
         ORG   *-15
CURSECS  DC    X'4020206B202120'
         ORG   ,
Q522MSG  DC    C'JOB MADE EXEMPT FROM STEP TIMING'
NONEXMT  DC    C'JOB MADE NON-EXEMPT FROM STEP TIMING'
ISEXMPT  DC    C'JOB IS EXEMPT FROM STEP TIMING'
NTEXMPT  DC    C'JOB NOT EXEMPT FROM STEP TIMING'
NAUTHMS  DC    C'*** THIS COMMAND MUST BE RUN AUTHORIZED ***'
OPERMSG  DC    C'*** THIS COMMAND NEEDS OPER AUTHORITY ***'
         END   BEGIN
